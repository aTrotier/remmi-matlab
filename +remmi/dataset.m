classdef dataset < handle
    % remmi.dataset is a general container for any kind of data given or 
    % returned from a remmi process. Before data can be stored or accessed 
    % through this class, the .mat file used to store this data must be 
    % provided through the static function datset.matfile()
    %
    % Kevin Harkins & Mark Does, Vanderbilt University
    % for the REMMI Toolbox
    
    properties
        name % the name used to store the data 
    end
    properties (Dependent)
        data 
    end
    methods
        function obj = dataset(name)
            % dataset(name), contructor
            %   name = a required alphanumeric string, where the first 
            %   character must be a letter. 
            
            % "name" must be alphanumeric with an letter first character
            if exist(name,'var') || isempty(name)
                error('dataset() requires a name');
            elseif ischar(name) && all(isstrprop(name,'alphanum'))
                if ~isstrprop(name(1),'alpha')
                    error('The first character of "name" must be a letter');
                else
                    obj.name = name;
                end
            else
                error('"name" must be alphanumeric');
            end
        end
        
        % data set method
        function set.data(obj,val)
            mfile = remmi.dataset.matfile();
            mfile.(obj.name) = val;
        end
        
        % data get method
        function val = get.data(obj)
            mfile = remmi.dataset.matfile();
            val = mfile.(obj.name);
        end
    end
    
    methods (Static)
        function out = matfile(in,overwrite)
            % out = matfile(in,overwrite)
            %   get/set operator of static matfile objects used to store
            %   this dataset
            %   
            %   in = string path to the .mat file, or a matlab.io.MatFile
            %       object (generated by the MATLB function 'matfile')
            %   overwrite = write into this .mat file. If false, a new
            %       matfile is generated
            %
            %   out = a matlab.io.MatFile object of the current .mat file
            %       used to store data
            
            persistent mfile;
            
            % set method
            if nargin
                if ~exist('overwrite','var');
                    overwrite = true;
                end
                
                if ischar(in)
                    if overwrite
                        % use the current matfile
                        mfile = matfile(in,'Writable',true);
                    else
                        % we should not ovewrite the current mat file.
                        % Create a new one.
                        
                        % add the extension if it was not included
                        if isempty(strfind(in,'.mat'))
                            in = [in '.mat'];
                        end

                        % copy & create a new .mat file, using the current 
                        % date & time
                        [fpath,fpre,~,fext] = remmi.util.parsename(in);
                        fname = [fullfile(fpath,[fpre '_' ...
                            datestr(now,'yyyy.mm.dd-HH:MM:SS')]) fext];
                        copyfile(in,fname);
                        mfile = matfile(fname,'Writable',true);
                    end
                elseif isa(in,'matlab.io.MatFile')
                    % just use the current matfile
                    mfile = in;
                else
                    error('"matfile" is not recognized');
                end
            end
            
            if ~isa(mfile,'matlab.io.MatFile')
                % something is wrong
                error('matfile is not defined');
            end
            
            % get method
            out = mfile;
        end
    end
end
